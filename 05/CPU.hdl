// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
// look at pg. 94 diagram

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).
                         // move PC to 0

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // TODO: AND every c-bit with instruction[15]... we don't want to do anything if we have a literal (A register needs special consideration)

    // Jumps & PC register
    // nextpc is the default
    Inc16(in=pcloopback, out=nextpc);
    And(a=aluwasneg, b=instruction[2], out=jlt);
    And(a=aluwaszero, b=instruction[1], out=jeq);
    Or(a=aluwasneg, b=aluwaszero, out=alunonpos);
    Not(in=alunonpos, out=aluwaspos);
    And(a=aluwaspos, b=instruction[0], out=jgt);
    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    And(a=jmp, b=instruction[15], out=cjmp);
    Mux16(a=nextpc, b=arego, sel=cjmp, out=pcjmped);
    
    Mux16(a=pcjmped, b=false, sel=reset, out=pcregin);
    PC(in=pcregin, load=true, out=pcloopback, out[0..14]=pc);
    
    // ALU
    Mux16(a=arego, b=inM, sel=instruction[12], out=aormo);
    ALU(x=drego, y=aormo, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, ng=aluwasneg, zr=aluwaszero); 

    // A Register
    Not(in=instruction[15], out=atcmd); // @number
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=inptoA);
    Or(a=atcmd, b=instruction[5], out=loadAreg); // d1 instruction bit
    ARegister(in=inptoA, load=loadAreg, out=arego, out[0..14]=addressM);

    // D Register
    And(a=instruction[4], b=instruction[15], out=destbit2);
    DRegister(in=aluout, load=destbit2, out=drego);

    And(a=instruction[3], b=instruction[15], out=writeM);
}
